/*
 * Copyright (C) 2013 Joshua Michael Hertlein <jmhertlein@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.jmhertlein.mctowns.upgrade;

import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.jmhertlein.mctowns.MCTownsPlugin;
import net.jmhertlein.mctowns.database.TownManager;
import net.jmhertlein.mctowns.util.MCTConfig;
import org.bukkit.Material;
import org.bukkit.configuration.InvalidConfigurationException;

/**
 *
 * @author Joshua Michael Hertlein <jmhertlein@gmail.com>
 */
public abstract class ResourceUpgradePaths {
    public static void upgradeResources(File rootDir, MCTownsPlugin p) {
        String installedVersion = p.getConfig().getString("installedVersion");

        //pre-2.2.0 used config.txt instead of config.yml, so we should detect if that's there first.
        if (new File(p.getDataFolder(), "config.txt").exists())
            installedVersion = "2.1.0";

        p.getLogger().log(Level.INFO, "Detected resources to be those generated by v{0}", installedVersion);

        switch (installedVersion) {
            case "2.1.0":
                upgradeFrom210To220(rootDir, p);
            case "2.2.0":
                upgradeFrom220To230(rootDir, p);
            case "2.3.0":
                upgradeInstalledVersion(rootDir, p, installedVersion, "2.3.1");
            case "2.3.1":
                upgradeInstalledVersion(rootDir, p, installedVersion, "2.3.2");
            case "2.3.2":
                upgradeFrom232To240(rootDir, p);
                upgradeInstalledVersion(rootDir, p, installedVersion, "2.4.0");
            default:
                p.getLogger().info("Resources are up to date.");
                break;
        }
    }

    private static void upgradeFrom210To220(File rootDir, MCTownsPlugin p) {
        p.getLogger().warning("Beginning resource migration from v2.1.0 to v2.2.0");

        p.getLogger().info("Copying town data files...");
        TownManager tempManager;
        try {
            tempManager = TownManager.readYAML(rootDir);
        } catch (IOException | InvalidConfigurationException ex) {
            p.getLogger().severe("ERROR MIGRATING RESOURCES:");
            Logger.getLogger(ResourceUpgradePaths.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        try {
            tempManager.writeYAML(p.getSavesDir().getAbsolutePath());
        } catch (IOException ex) {
            p.getLogger().severe("ERROR MIGRATING RESOURCES:");
            Logger.getLogger(ResourceUpgradePaths.class.getName()).log(Level.SEVERE, null, ex);
        }

        p.getLogger().info("Town data files copied.");

        p.getLogger().info("Deleting old data files...");
        for (File f : rootDir.listFiles()) {
            if (!p.getConfigFiles().contains(f) && !p.getDataDirs().contains(f)) {
                f.delete();
                p.getLogger().log(Level.INFO, "{0} deleted successfully.", f.getName());
            }
        }
        p.getLogger().info("Finished deleting old files.");

        p.getLogger().info(("Updating \"installedVersion\" field in config.yml from 2.1.0 to 2.2.0"));
        p.getConfig().set("installedVersion", "2.2.0");
        p.saveConfig();

        p.getLogger().warning("Completed resource migration from v2.1.0 to v2.2.0");
    }

    private static void upgradeFrom220To230(File rootDir, MCTownsPlugin p) {
        p.getLogger().warning("Beginning resource migration from v2.2.0 to v2.3.0");
        p.getLogger().info(("Updating \"installedVersion\" field in config.yml from 2.2.0 to 2.3.0"));
        p.getConfig().set("installedVersion", "2.3.0");
        p.getLogger().info("Setting bugReportHostname to services.jmhertlein.net");
        p.getConfig().set("bugReportHostname", "services.jmhertlein.net");
        p.saveConfig();
        p.getLogger().warning("Completed resource migration from v2.2.0 to v2.3.0");
    }

    private static void upgradeInstalledVersion(File rootDir, MCTownsPlugin p, String installedVer, String curVer) {
        p.getLogger().warning("Beginning resource migration from " + installedVer + " to " + curVer);
        p.getLogger().info("Updating \"installedVersion\" field in config.yml from " + installedVer + "  to " + curVer);
        p.getConfig().set("installedVersion", curVer);
        p.saveConfig();
        p.getLogger().warning("Completed resource migration from " + installedVer + " to " + curVer);
    }

    private static void upgradeFrom232To240(File rootDir, MCTownsPlugin p) {
        p.getLogger().info("Converting old tool ID into String...");
        p.getConfig().set(MCTConfig.QUICKSELECT_TOOL.getKey(), Material.getMaterial(MCTConfig.QUICKSELECT_TOOL.getInt()).toString());
        p.getLogger().info("Converted old tool ID into String");
    }
}
